心得 到上禮拜五
基本上很多基本知識都要回顧歷史到他原本受限於時空背景的功能後，才能比較了解現在這些功能的定義與原自於何因。
例如ＣＥＲＮ 的超文本其實是為了 提供實驗室看研究用。
Markdown則是這些文章結構的精簡版。
且很多東西都是有一套基本的架構後各自為自己的目的性去做特化，如ＯＳ是根據ＰＯＳＩＸ  ＩＥＥＥ 而衍伸出多版本如Ｌinux
mac os ，而很多基本配備大體上都差不多，如ＨＯＭＥ(/)裡會有預設資料夾，習慣同一屬性丟同一目錄，基本上是大家共通習慣的產物，當然可以有自己習慣。
而其中最大的重點是filesystem，目的是管理在硬碟的目錄＆檔案（另一相對重點是process manage：在看跑的東，和ＣＰＵ＆ＲＡＭ有關，所以有ＰＩＤ這東西去管理每一個process）。一套放法一套邏輯，當然自己也能發明一套使自己效率更佳但缺點是別人看不懂。而檔案或資料夾有架構，同樣推理，網站等等也有他自己的架構（一套放法的邏輯）。
而管理這些目錄和檔案就需要指令，而目前學的是
單機版的指令，之後會教網路指令（Key word 和協定有關）。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
以下是截至上禮拜五所學東西一些同整
歷史：ＣＥＲＮ 超文本 提供實驗室看研究用
ＰＯＳＩＸ  ＩＥＥＥ ：ＯＳ根據以上
如ＨＯＭＥ(/)裡會有預設資料夾
習慣同一屬性丟同一目錄
基本上是大家共通習慣的產物，當然可以有自己習慣

指令是某英文的縮寫
tab鍵：補字
⬆️鍵：顯示歷史用的指令
cmd k:clear
星號 wild card match
control c:終止在執行的指令
cmd +- 放大縮小


三大介面
ＧＵＩ（很多東西優化後的產物）
ＣＬＩ  （成功其實很安靜）
兩者是相對應的ＥＸ：ＣＬＩ的動作ＧＵＩ會有

ＡＰＩ（尚未學） 

兩大重點
（1）filesystem:目的是管理在硬碟的目錄＆檔案
衍伸相對應的指令（大致上分對目錄的指令＆對檔案的指令）)

『不會用的指令想要知道他的用法』
man
help


pwd(print working director)
ls(list)（看目前所在的目錄之內容或看其他目錄的內容） -a(顯示含點的檔案)  -l(顯示各目錄的管理權限：
分三欄owner group others:以前是大主機下面有很多使用者個分配一個視窗（前景 背景）)
cd （change director）（.是目前目錄）（..是上層目錄）
絕對路徑（根據根目錄『/』）
相對路徑（根據目前目錄）
所以要知道現在在哪個資料夾做什麼是很重要的事
mv(移動)（重新命名）
cp（複製)
mkdir(make director )
touch(建立檔案：通常是文字檔：因我們現在用文字使用介面)
open(打開檔案)
cat(打開檔案看文字檔)

rm(移除檔案)
rmdir(移除資料夾)

disk free (問檔案系統空間的使用)
『remark』參數分短版(-)和長版( - - )  接受這兩版本 好記憶跟好打
verbose
du（所在目錄各個資料和檔案的容量使用情形）
(-h:help or human)
  (2)  process manage：在看跑的東（整理中）
以上先這樣


